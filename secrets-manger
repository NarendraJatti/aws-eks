https://github.com/external-secrets/external-secrets
In the case of using Secrets Store CSI Driver with AWS Secrets Manager, the secrets are not automatically updated in the pod when the secret is updated in AWS Secrets Manager. By default, the Secrets Store CSI driver fetches the secrets at the time of pod creation, and changes to the secrets will not be automatically reflected in the pod's mounted volume.

Options to Update Secrets:
1)Restart the Pod: 
kubectl delete pod test-secret-pod
kubectl apply -f pod-secret.yaml
2)Enable Automatic Rotation: If you need the secrets to automatically update in the pod when the secret in Secrets Manager changes, you'll need to enable secret rotation.

For AWS Secrets Store CSI Driver, you can configure automatic secret rotation by integrating it with AWS Secrets Manager rotation. Youâ€™ll need to:

Enable secret rotation in AWS Secrets Manager for the specific secret.
Implement the required configuration to refresh the pod or trigger redeployment when the secret changes.
3)Manual Update of the Mounted Volume: Alternatively, you can force Kubernetes to remount the volume by manually deleting the pod and letting it be recreated. You can also automate this process using tools like Kubernetes controllers to redeploy the pod when secrets change.


Install AWS Secrets Store CSI Driver in EKS
Step 1: Add the Helm chart repository
Step 2: Install the Secrets Store CSI driver in EKS
Step 3: Install the AWS provider for the Secrets Store CSI Driver

important>irsa> You need to associate an IAM role with the Kubernetes service account (in this case, the default service account) to give the pod permissions to retrieve secrets from Secrets Manager.

Create a Secret in AWS Secrets Manager
aws secretsmanager create-secret --name my-secret --secret-string '{"username":"admin"}'

A SecretProviderClass defines how the CSI driver should retrieve secrets from AWS Secrets Manager.
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: aws-secrets
  namespace: default
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "my-secret"
        objectType: "secretsmanager"



In Kubernetes, there's no direct command to "restart" a pod, but there are different ways to achieve a restart depending on how your pod is managed:
1. Pods Managed by a Deployment or ReplicaSet:
Method: Rolling Restart

You can restart all the pods in a Deployment (or ReplicaSet) by updating the deployment, which triggers a rolling restart.
To restart the pods, run:

kubectl rollout restart deployment <deployment-name>
This will gracefully terminate the old pods and create new ones.

ethod: Scaling the Deployment

You can scale down and scale up your deployment to effectively restart all the pods:

kubectl scale deployment <deployment-name> --replicas=0
kubectl scale deployment <deployment-name> --replicas=<desired-replicas>

tandalone Pods:
For standalone pods (not managed by Deployments, ReplicaSets, etc.), there's no direct restart mechanism.
You have to delete and recreate the pod.

kubectl delete pod <pod-name>
If the pod is standalone, it won't be automatically recreated unless you apply the pod YAML again or use the appropriate command.

Force Restart by Changing the Pod Spec:
You can trigger a pod restart by making a small change to the pod's definition (like adding an annotation). This change forces Kubernetes to recreate the pod.
kubectl annotate pod <pod-name> kubernetes.io/restartedAt="$(date +%s)" --overwrite
This won't restart the pod immediately but will cause Kubernetes to replace the pod with a new one.

Summary:
For managed pods (Deployment, ReplicaSet): Use kubectl rollout restart.
For standalone pods: You need to delete and manually recreate them.



important>
1. Enable Automatic Secret Rotation with AWS Secrets Manager
Step 1: Enable Secret Rotation in AWS Secrets Manager using a lambda func
aws secretsmanager rotate-secret --secret-id <your-secret-arn> --rotation-lambda-arn <your-lambda-function-arn> --rotation-rules AutomaticallyAfterDays=30

Step 2: Configure Kubernetes to Automatically Handle Secret Updates
Even though AWS Secrets Manager rotates the secret, the pod does not automatically pick up the updated secret. To handle this, you'll need to automate pod refresh/redeploy.

Here are a few strategies:

Use a Kubernetes Operator: Some external operators (like External Secrets Operator) can sync external secrets from AWS Secrets Manager into Kubernetes as native Kubernetes secrets. When the secret changes, the operator will update the Kubernetes secret and trigger a rolling update of pods.

Sidecar container approach: You can run a sidecar container alongside your pod to watch for secret changes and restart or refresh the application automatically.

Trigger redeployment: A simple approach is to manually or programmatically trigger a pod redeployment when the secret changes, for example, using a cron job or automation via a CI/CD pipeline.

Example of Redeploying Pod on Secret Change
Create a cron job or use AWS Lambda/CLI automation to trigger a Kubernetes deployment update whenever the secret is rotated. Example:
kubectl rollout restart deployment <your-deployment-name>


Manual Update of Mounted Volume (Re-mount Secrets)
This approach is useful when you want to handle secret changes more manually or with fine-grained control. Kubernetes does not automatically re-mount volumes or restart pods when the secret is updated, so you need to force a remount.
Step 1: Remount the Volume by Restarting the Pod
When the secret in AWS Secrets Manager changes, the volume needs to be re-mounted to reflect the updated secret. The simplest approach is to delete and recreate the pod.
This forces the pod to restart and remount the updated secret.

Step 2: Automate Pod Deletion or Rolling Update on Secret Change
You can automate this process in several ways:

Kubernetes CronJob: Create a cron job that deletes the pod at regular intervals, which forces a remount.

Example of a simple cron job:

Custom Controller or Script: Create a script or custom Kubernetes controller that monitors AWS Secrets Manager (using AWS SDK or API calls) and triggers a rolling update whenever the secret changes.

AWS Lambda and Kubernetes API: You can also use AWS Lambda to call the Kubernetes API or trigger a Kubernetes deployment update when the secret changes.

Example Lambda code (in Python) to restart a pod when a secret is updated:

import os
import boto3
from kubernetes import client, config

def lambda_handler(event, context):
    secret_name = event['SecretId']

    # Initialize Kubernetes client
    config.load_kube_config()  # Use kubeconfig or load_cluster_config() for in-cluster

    v1 = client.CoreV1Api()
    
    # Restart pod (delete and recreate)
    pod_name = "<pod-name>"
    namespace = "<namespace>"
    
    try:
        v1.delete_namespaced_pod(name=pod_name, namespace=namespace)
        print(f"Pod {pod_name} restarted in namespace {namespace}")
    except Exception as e:
        print(f"Error restarting pod: {e}")


